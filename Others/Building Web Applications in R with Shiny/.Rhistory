library(shiny); runApp('shiny.R')
runApp('shiny - Copy.R')
runApp('shiny - Copy.R')
four_players = data.frame(x=x, y=y)
x=c(5, 15, 0, -5)
y=c(5, 15, 0, -5)
four_players = data.frame(x=x, y=y)
four_players
dist_players = dist(four_players)
class(dist_players)
dist_players
dist_players[1]
dist_players$size
attributes(dist_players)
dist_players$Size
dist_players$Diag
length(dist_players)
?hclust
?dist
dist_players = structure(c(11.6619037896906, 16.7630546142402, 18.0277563773199
), Size = 3L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = dist(x = three_players), class = "dist")
three_players = data.frame(x = c(5, 15, 0), y = c(4, 10, 20))
dist_players = structure(c(11.6619037896906, 16.7630546142402, 18.0277563773199
), Size = 3L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = dist(x = three_players), class = "dist")
dist_players
o = "optimization"
strsplit(o)
strsplit(o,"")
unlist(strsplit(o,""))
sample(unlist(strsplit(o,"")))
sample(unlist(strsplit(o,"")))
sample(unlist(strsplit(o,"")))
sample(unlist(strsplit(o,"")))
sample(unlist(strsplit(o,"")))
?selectInput
library(shiny)
?selectInput
?dateRangeInput
# Load packages
library(shiny)
library(ggplot2)
library(tidyverse)
library(DT)
# Load data
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
br(),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y", label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x", label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output:
mainPanel(
# Show scatterplot with brushing capability
plotOutput(outputId = "scatterplot", brush = "plot_brush"),
# Show data table
dataTableOutput(outputId = "moviestable"),
br()
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Create data table
output$moviestable <- DT::renderDataTable({
brushedPoints(movies, brush = input$plot_brush) %>%
select(title, audience_score, critics_score)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
# Load packages
library(shiny)
library(ggplot2)
library(tidyverse)
library(DT)
# Load data
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
br(),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y", label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x", label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output:
mainPanel(
# Show scatterplot with brushing capability
plotOutput(outputId = "scatterplot", hover = "plot_hover"),
# Show data table
dataTableOutput(outputId = "moviestable"),
br()
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Create data table
output$moviestable <- DT::renderDataTable({
brushedPoints(movies, brush = input$plot_brush) %>%
select(title, audience_score, critics_score)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(tm)
stopwords
stopwords()
length(stopwords())
library(shiny)
?plotOutput
?brushedPoints
# Load packages
library(shiny)
library(ggplot2)
library(tidyverse)
library(DT)
# Load data
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
br(),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y", label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x", label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output:
mainPanel(
# Show scatterplot with brushing capability
plotOutput(outputId = "scatterplot", hover = "plot_hover"),
# Show data table
dataTableOutput(outputId = "moviestable"),
br()
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Create data table
output$moviestable <- DT::renderDataTable({
nearPoints(movies, hover = input$plot_hover) %>%
select(title, audience_score, critics_score)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
# Load packages
library(shiny)
library(ggplot2)
library(tidyverse)
library(DT)
# Load data
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
br(),
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y", label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x", label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output:
mainPanel(
# Show scatterplot with brushing capability
plotOutput(outputId = "scatterplot", hover = "plot_hover"),
# Show data table
dataTableOutput(outputId = "moviestable"),
br()
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Create data table
output$moviestable <- DT::renderDataTable({
nearPoints(movies, input$plot_hover) %>%
select(title, audience_score, critics_score)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input(s)
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output(s)
mainPanel(
plotOutput(outputId = "scatterplot"),
verbatimTextOutput(outputId = "lmoutput"), # regression output
textOutput(outputId = "avg_x"), # avg of x
textOutput(outputId = "avg_y") # avg of y,
)
)
# Server
server <- function(input, output) {
# Create scatterplot
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Calculate average of x
output$avg_x <- renderText({
avg_x <- movies %>% pull(input$x) %>% mean() %>% round(2)
paste("Average", input$x, "=", avg_x)
})
# Calculate average of y
output$avg_y <- renderText({
avg_y <- movies %>% pull(input$y) %>% mean() %>% round(2)
paste("Average", input$y, "=", avg_y)
})
# Create regression output
output$lmoutput <- renderPrint({
x <- movies %>% pull(input$x)
y <- movies %>% pull(input$y)
summ <- summary(lm(y ~ x, data = movies))
print(summ, digits = 3, signif.stars = FALSE)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input(s)
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output(s)
mainPanel(
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "avg_x"), # avg of x
textOutput(outputId = "avg_y"), # avg of y
verbatimTextOutput(outputId = "lmoutput") # regression output
)
)
)
# Server
server <- function(input, output) {
# Create scatterplot
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Calculate average of x
output$avg_x <- renderText({
avg_x <- movies %>% pull(input$x) %>% mean() %>% round(2)
paste("Average", input$x, "=", avg_x)
})
# Calculate average of y
output$avg_y <- renderText({
avg_y <- movies %>% pull(input$y) %>% mean() %>% round(2)
paste("Average", input$y, "=", avg_y)
})
# Create regression output
output$lmoutput <- renderPrint({
x <- movies %>% pull(input$x)
y <- movies %>% pull(input$y)
summ <- summary(lm(y ~ x, data = movies))
print(summ, digits = 3, signif.stars = FALSE)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input(s)
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output(s)
mainPanel(
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "avg_x"), # avg of x
textOutput(outputId = "avg_y"), # avg of y
verbatimTextOutput(outputId = "lmoutput") # regression output
)
)
)
# Server
server <- function(input, output) {
# Create scatterplot
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Calculate average of x
output$avg_x <- renderText({
avg_x <- movies %>% pull(input$x) %>% mean() %>% round(2)
paste("Average", input$x, "=", avg_x)
})
# Calculate average of y
output$avg_y <- renderText({
avg_y <- movies %>% pull(input$y) %>% mean() %>% round(2)
paste("Average", input$y, "=", avg_y)
})
# Create regression output
output$lmoutput <- renderText({
x <- movies %>% pull(input$x)
y <- movies %>% pull(input$y)
summ <- summary(lm(y ~ x, data = movies))
print(summ, digits = 3, signif.stars = FALSE)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input(s)
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Output(s)
mainPanel(
plotOutput(outputId = "scatterplot"),
textOutput(outputId = "avg_x"), # avg of x
textOutput(outputId = "avg_y"), # avg of y
verbatimTextOutput(outputId = "lmoutput") # regression output
)
)
)
# Server
server <- function(input, output) {
# Create scatterplot
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
# Calculate average of x
output$avg_x <- renderText({
avg_x <- movies %>% pull(input$x) %>% mean() %>% round(2)
paste("Average", input$x, "=", avg_x)
})
# Calculate average of y
output$avg_y <- renderText({
avg_y <- movies %>% pull(input$y) %>% mean() %>% round(2)
paste("Average", input$y, "=", avg_y)
})
# Create regression output
output$lmoutput <- renderPrint({
x <- movies %>% pull(input$x)
y <- movies %>% pull(input$y)
summ <- summary(lm(y ~ x, data = movies))
print(summ, digits = 3, signif.stars = FALSE)
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
?pull
>downloadButton
?downloadButton
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(readr)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# UI
ui <- fluidPage(
sidebarLayout(
# Input(s)
sidebarPanel(
# Select filetype
radioButtons(inputId = "filetype",
label = "Select filetype:",
choices = c("csv", "tsv"),
selected = "csv"),
# Select variables to download
checkboxGroupInput(inputId = "selected_var",
label = "Select variables:",
choices = names(movies),
selected = c("title"))
),
# Output(s)
mainPanel(
HTML("Select filetype and variables, then hit 'Download data'."),
downloadButton("download_data", "Download data")
)
)
)
# Server
server <- function(input, output) {
# Download file
output$downloadData  <- downloadHandler(
filename = function() {
paste0("movies.", input$filetype)
},
content = function(file) {
if(input$filetype == "csv"){
write_csv(movies %>% select(input$selected_var), file)
}
if(input$filetype == "tsv"){
write_tsv(movies %>% select(input$selected_var), file)
}
}
)
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
